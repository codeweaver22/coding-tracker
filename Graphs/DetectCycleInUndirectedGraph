
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
 public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  int t = sc.nextInt();

  while (t--> 0) {
   ArrayList < ArrayList < Integer >> list = new ArrayList < > ();
   int nov = sc.nextInt();
   int edg = sc.nextInt();

   for (int i = 0; i < nov + 1; i++)
    list.add(i, new ArrayList < Integer > ());

   for (int i = 1; i <= edg; i++) {
    int u = sc.nextInt();
    int v = sc.nextInt();
    list.get(u).add(v);
    list.get(v).add(u);
   }
   if (new DetectCycle().isCyclic(list, nov) == true)
    System.out.println("1");
   else System.out.println("0");
  }
 }
} 

class DetectCycle {
 static boolean isCyclic(ArrayList < ArrayList < Integer >> list, int V) {
  // add your code here
  boolean[] visited = new boolean[V];
  boolean ans = false;
  for (int i = 0; i < V; i++) {
   if (visited[i] == false) {
    ans = DFS(list, i, visited, -1);
    if (ans)
     return true;
   }
  }
  return ans;
 }

 static boolean DFS(ArrayList < ArrayList < Integer >> list, int Ns, boolean[] visited, int parent) {
  visited[Ns] = true;
  for (int n: list.get(Ns)) {
   if (visited[n] == false) {
    if (DFS(list, n, visited, Ns))
     return true;
   } else {
    if (n != parent)
     return true;
   }
  }
  return false;
 }
}
