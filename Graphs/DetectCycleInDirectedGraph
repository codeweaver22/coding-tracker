// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int nov = sc.nextInt();
            int edg = sc.nextInt();
            for(int i = 0; i < nov+1; i++)
                list.add(i, new ArrayList<Integer>());
            for(int i = 1; i <= edg; i++)
            {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if(new DetectCycle().isCyclic(list, nov) == true)
                System.out.println("1");
            else System.out.println("0");
        }
    }
}// } Driver Code Ends


/*Complete the function below*/

/*
ArrayList<ArrayList<Integer>> adj: to represent graph containing 'v'
                                    vertices and edges between them
V: represent number of vertices
*/
class DetectCycle
{
    static boolean isCyclic(ArrayList<ArrayList<Integer>> adj, int V)
    {
        // add your code here
        boolean res=false;
        boolean[] vis = new boolean[V];
        boolean[] rec = new boolean[V];
        for(int i = 0;i<V;i++)
        {
            if(vis[i]==false)
            {
                res = DFS(adj,vis,rec,i);
            }
            if(res)
            return true;
        }
        return false;
    }
    
    static boolean DFS(ArrayList<ArrayList<Integer>> list,
    boolean[] vis,boolean[] rec,int curr)
    {
        vis[curr] = true;
        rec[curr] = true;
        for(int n:list.get(curr))
        {
            // If Node n visited is equal to false and it is present in the recursive stack then it is cyclic
            if(vis[n]==false)
            {
                if(DFS(list,vis,rec,n))
                {
                    return true;
                }
            }
            else if(rec[n]==true)
            return true;
        }
        rec[curr] = false;
        return false;
    }
}
