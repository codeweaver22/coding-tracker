// Find Pythagorean triple with O(n2) complexity

import java.util.*;
import java.lang.*;
import java.io.*;
class Main {
 public static void main(String[] args) {
  //code
  Scanner scan = new Scanner(System.in);
  int T = scan.nextInt();
  while (T > 0) {
   int size = scan.nextInt();
   int[] arr = new int[size];
   for (int i = 0; i < size; i++) {
    arr[i] = scan.nextInt();
   }
   Arrays.sort(arr);
   boolean ans = findTriplets(arr, size);
   System.out.println(ans ? "Yes" : "No");
   T--;
  }
 }
 
 public static boolean findTriplets(int[] arr, int size) {
  boolean ans;
  for (int i = size - 1; i >= 0; i--) {
   ans = isPair(0, i - 1, arr[i], arr);
   if (ans)
    return true;
   else
    continue;
  }
  return false;
 }
 
 public static boolean isPair(int start, int end, int num, int[] arr) {
  double sqrNum = Math.pow(num, 2);
  while (start < end) {
   double sqrStart = Math.pow(arr[start], 2);
   double sqrEnd = Math.pow(arr[end], 2);
   if ((sqrStart + sqrEnd) == sqrNum) {
    return true;
   }
   if (sqrStart + sqrEnd < sqrNum)
    start++;
   else
    end--;
  }
  return false;
 }
}
