
import java.io.*;
import java.util.*;

class Array {
    
	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		while(t-->0){
		    int n = Integer.parseInt(br.readLine().trim());// input size of array
		    int arr[] = new int[n];
		    String inputLine2[] = br.readLine().trim().split(" ");
		    for(int i=0; i<n; i++){
		        arr[i] = Integer.parseInt(inputLine2[i]); // input elements of array
		    }
		    
		    Kadane obj = new Kadane();
		    
		    System.out.println(obj.circularSubarraySum(arr, n));// print the circularSubarraySum
		}
	}
}

class Kadane{
    
    // Function to find circular subarray with maximum sum
    // a: input array
    // n: size of array
    static int circularSubarraySum(int a[], int n) {
        
        // Your code here
        int sum=0;
        
        // To find the sum of array
        for(int i=0;i<n;i++)
        {
            sum += a[i];
        }
        
        int maxSubarray = kadane(a,n);
        int minSubarray = minKadane(a,n);
        return (maxSubarray>0)?Integer.max(maxSubarray, sum - minSubarray):maxSubarray;
    }
    
    static int kadane(int[] a,int n){
        int curMax=0,globalMax=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
            curMax = Math.max(curMax+a[i],a[i]);
            globalMax = Math.max(globalMax,curMax);
        }
        return globalMax;
    }
    
    static int minKadane(int[] a,int n){
        int currMin=0,globalMin=Integer.MAX_VALUE;
        for(int i=0;i<n;i++)
        {
            currMin = Math.min(currMin+a[i],a[i]);
            globalMin = Math.min(globalMin,currMin);
        }
        return globalMin;
    }
}
